package main

import (
	"fmt"
)

/*

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

*/

// NOTE: Fibonacci sequence goes odd, even, odd, odd, even, odd, odd, even, odd, odd, even...
// so we only "need" terms f1, f4, f7,
// == SUM(f(3n+1)) while f(3n+1) < 4,000,000

func evenFibonacciSumValuesLessThan(x int64) int64 {
	// Fn = 4Fn-1 + Fn-2
	var FnMinus2 int64
	var FnMinus1 int64 = 2
	var term int64
	var sum int64 = 2
	for {
		term = 4*FnMinus1 + FnMinus2

		FnMinus2 = FnMinus1
		FnMinus1 = term

		if term >= x {
			break
		} else {
			sum += term
		}
	}
	return sum
}

func p2() {
	fmt.Printf("The sum of even fibonnaci numbers less than 4,000,000: %d\n", evenFibonacciSumValuesLessThan(4000000))
}
